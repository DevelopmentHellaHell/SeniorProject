using Microsoft.Data.SqlClient;

namespace DevelopmentHell.Hubba.SqlDataAccess
{

    /*    public enum ResultStatus
        {
            Unknown = 0,
            Success = 1,
            Faulty = 2
        }*/

    public class RegistrationDataAccess : IDataAccessInsert
    {
        public RegistrationDataAccess()
        {
        }
        public RegistrationDataAccess(string tableName)
        {

        }
        /// <summary>
        /// Insert an email and passphrase into the method and returns a result
        /// </summary>
        /// <param name="dataBaseName">Name of the database that is being accessed</param>
        /// <param name="tableName">Table of the database that values are inserted into</param>
        /// <param name="values">Values added to the database. In this case it should only be email and passphrase hash</param>
        /// <returns>Result of SQL insertion statement into the Registration database of a new Account. 
        /// IsSuccessful is whether the insertion succeeded,
        /// ErrorMessage contains any error codes if the insertion failed,
        /// Payload contains the username generated by the database
        /// </returns>
        /// 
        public Result InsertNewAccount(string databaseName, string tableName, List<Object> values)
        {
            var result = new Result();
            List<Object> columnNames = new List<object>();

            foreach (Object obj in values)
            {
                if (obj is null)
                {
                    result.ErrorMessage = "Error: Email or passphrase is NULL.";
                    result.IsSuccessful = false;
                    return result;
                }
            }

            columnNames.Add("email");
            columnNames.Add("passphrase");
            result = Insert(databaseName, tableName, columnNames, values);
            return result;
        }

        /// <summary>
        /// This method inserts the values into the specified table at the specified database, assuming ALL VALUES ARE STRINGS
        /// </summary>
        /// <param name="dataBaseName">Name of the database that is being accessed</param>
        /// <param name="tableName">Table of the database that values are inserted into</param>
        /// <param name="columnNames">Name of the columns that correspond to the values</param>
        /// <param name="values">List of the values being added, MUST BE STRINGS</param>
        /// <returns>Result of SQL insertion statement into the database. 
        /// IsSuccessful is whether the insertion succeeded,
        /// ErrorMessage contains any error codes if the insertion failed,
        /// Payload is empty</returns>
        public Result Insert(string databaseName, string tableName, List<Object> columnNames, List<Object> values)
        {

            var result = new Result();
            // TODO: CHANGE ENCRYPT TO TRUE FOR ACTUAL SERVER IMPLEMENTATION
            var connectionString = @"Server=DESKTOP-NZXT\SQLEXPRESS;Database=" + databaseName +"; Integrated Security=True;Encrypt=False";

            string columnName = string.Empty;
            bool firstValue = true;
            string columnSqlStatement = String.Empty;
            string valueSqlStatement = String.Empty;
            string value = string.Empty;
            string parameter = string.Empty;

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();

                string insertSql = "INSERT INTO " + tableName + " (";
                foreach(Object obj in columnNames) 
                {
                    if (obj is not null)
                    {
                        columnName = (string)obj;
                    }
                    if (firstValue == true)
                    {
                        columnSqlStatement += columnName;
                        valueSqlStatement += "@" + columnName;
                        firstValue = false;
                    }
                    else
                    {
                        columnSqlStatement += ", " + columnName;
                        valueSqlStatement += ",@" + columnName;
                    }
                }
                insertSql += columnSqlStatement+ ") VALUES ("+ valueSqlStatement +")";
                var command = new SqlCommand(insertSql, connection);

                for (int i = 0; i < values.Count; ++i)
                {
                    command.Parameters.Add(new SqlParameter((string)(columnNames[i]), (string)(values[i])));
                }
                try
                {
                    var rows = command.ExecuteNonQuery();
                    if(rows == 1)
                    {
                        result.IsSuccessful = true;
                        //result.Payload = account_id;
                        return result;
                    }
                    result.IsSuccessful = false;
                    result.ErrorMessage = $"Rows affected was not 1. It was {rows}";
                    return result;
                }
                catch(Exception e)
                {
                    result.ErrorMessage = e.Message;
                }
                
                result.IsSuccessful = false;
                return result;
            }

        }

        public Result AccessEmail(int account_id)
        {
            //TODO: RETURN EMAIL 
            var result = new Result();

            return result;
            

        }

        public Result AccessPassphrase(int account_id)
        {
            //TODO: RETURN passphrase 
            var result = new Result();
            return result;
            
        }
    }
}